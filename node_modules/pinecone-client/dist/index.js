// src/fetch-api.ts
import ky from "ky";
function createApiInstance(opts) {
  return ky.extend({
    prefixUrl: opts.baseUrl,
    headers: {
      "Api-Key": opts.apiKey
    },
    hooks: {
      beforeError: [
        async (error) => {
          const { response } = error;
          if (response && response.body) {
            try {
              const body = await response.json();
              if (body.message) {
                return new PineconeError(body.message, {
                  code: body.code,
                  details: body.details,
                  status: response.status,
                  cause: error
                });
              }
            } catch (e) {
              console.error("Failed reading HTTPError response body", e);
            }
          }
          return error;
        }
      ]
    }
  });
}
var PineconeError = class extends Error {
  code;
  details;
  status;
  constructor(message, opts) {
    if (opts.cause) {
      super(message, { cause: opts.cause });
    } else {
      super(message);
    }
    this.name = this.constructor.name;
    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, this.constructor);
    }
    this.code = opts.code;
    this.status = opts.status;
    if (opts.details) {
      this.details = opts.details;
    }
  }
};

// src/utils.ts
function removeNullValuesFromObject(obj) {
  if (obj === void 0)
    return void 0;
  for (const key in obj) {
    const value = obj[key];
    if (value === null)
      delete obj[key];
    else if (typeof value == "object")
      removeNullValuesFromObject(value);
  }
  return obj;
}
function removeNullValues(obj) {
  if (obj === void 0)
    return void 0;
  const { metadata, filter, setMetadata, ...rest } = obj;
  return {
    filter: removeNullValuesFromObject(filter),
    metadata: removeNullValuesFromObject(metadata),
    setMetadata: removeNullValuesFromObject(setMetadata),
    ...rest
  };
}

// src/pinecone-client.ts
var PineconeClient = class {
  api;
  apiKey;
  baseUrl;
  namespace;
  constructor(config) {
    const apiKey = config.apiKey || process.env.PINECONE_API_KEY;
    const baseUrl = config.baseUrl || process.env.PINECONE_BASE_URL;
    if (!apiKey) {
      throw new Error(
        "Missing Pinecone API key. Please provide one in the config or set the PINECONE_API_KEY environment variable."
      );
    }
    if (!baseUrl) {
      throw new Error(
        "Missing Pinecone base URL. Please provide one in the config or set the PINECONE_BASE_URL environment variable."
      );
    }
    this.apiKey = apiKey;
    this.baseUrl = baseUrl;
    this.namespace = config.namespace;
    this.api = createApiInstance({
      apiKey: this.apiKey,
      baseUrl: this.baseUrl
    });
  }
  async delete(params) {
    return this.api.post("vectors/delete", {
      json: {
        namespace: this.namespace,
        ...removeNullValues(params)
      }
    }).json();
  }
  async describeIndexStats(params) {
    return this.api.post("describe_index_stats", {
      json: removeNullValues(params)
    }).json();
  }
  async fetch(params) {
    const searchParams = [];
    if (this.namespace)
      searchParams.push(["namespace", this.namespace]);
    params.ids.forEach((id) => searchParams.push(["ids", id]));
    return this.api.get("vectors/fetch", { searchParams }).json();
  }
  async query(params) {
    return this.api.post("query", {
      json: {
        namespace: this.namespace,
        ...removeNullValues(params)
      }
    }).json();
  }
  async update(params) {
    return this.api.post("vectors/update", {
      json: {
        namespace: this.namespace,
        ...removeNullValues(params)
      }
    }).json();
  }
  async upsert(params) {
    const chunkSize = 1e3;
    for (let i = 0; i < params.vectors.length; i += chunkSize) {
      const vectors = params.vectors.slice(i, i + chunkSize);
      const vectorsWithoutMetadataNulls = vectors.map(removeNullValues);
      await this.api.post("vectors/upsert", {
        json: {
          namespace: this.namespace,
          vectors: vectorsWithoutMetadataNulls
        }
      }).json();
    }
  }
};
export {
  PineconeClient
};
//# sourceMappingURL=index.js.map
