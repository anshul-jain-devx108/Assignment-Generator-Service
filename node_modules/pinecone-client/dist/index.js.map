{
  "version": 3,
  "sources": ["../src/fetch-api.ts", "../src/utils.ts", "../src/pinecone-client.ts"],
  "sourcesContent": ["import ky from 'ky';\n\n/**\n * Create an instance of Ky with options shared by all requests.\n */\nexport function createApiInstance(opts: { apiKey: string; baseUrl: string }) {\n  return ky.extend({\n    prefixUrl: opts.baseUrl,\n    headers: {\n      'Api-Key': opts.apiKey,\n    },\n    hooks: {\n      beforeError: [\n        // @ts-ignore\n        async (error) => {\n          const { response } = error;\n          if (response && response.body) {\n            try {\n              const body = await response.json();\n              if (body.message) {\n                return new PineconeError(body.message, {\n                  code: body.code,\n                  details: body.details,\n                  status: response.status,\n                  cause: error,\n                });\n              }\n            } catch (e) {\n              console.error('Failed reading HTTPError response body', e);\n            }\n          }\n          return error;\n        },\n      ],\n    },\n  });\n}\n\ntype PineconeErrorDetail = { typeUrl: string; value: string };\n\nexport class PineconeError extends Error {\n  public code: number;\n  public details?: PineconeErrorDetail[];\n  public status: number;\n\n  constructor(\n    message: string,\n    opts: {\n      cause?: Error;\n      code: number;\n      details?: PineconeErrorDetail[];\n      status: number;\n    }\n  ) {\n    if (opts.cause) {\n      // @ts-ignore not sure why TS can't handle this\n      super(message, { cause: opts.cause });\n    } else {\n      super(message);\n    }\n\n    // Ensure the name of this error is the same as the class name\n    this.name = this.constructor.name;\n\n    // Set stack trace to caller\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n\n    this.code = opts.code;\n    this.status = opts.status;\n\n    if (opts.details) {\n      this.details = opts.details;\n    }\n  }\n}\n", "import type { NoNullParams, RootMetadata } from './types';\n\n/**\n * Recursively remove keys with null values from an object.\n * Also handles accepting undefined to prevent repeating this logic at each call site.\n */\nexport function removeNullValuesFromObject<T extends {}>(\n  obj?: T\n): T | undefined {\n  if (obj === undefined) return undefined;\n  for (const key in obj) {\n    const value = obj[key];\n    if (value === null) delete obj[key];\n    else if (typeof value == 'object') removeNullValuesFromObject(value);\n  }\n  return obj;\n}\n\n/**\n * This remove null values from the metadata and filter properties of the given\n * object. This makes it easier to work with Pinecones lack of support for null.\n */\nexport function removeNullValues<\n  Metadata extends RootMetadata,\n  T extends NoNullParams<Metadata>\n>(obj: T | undefined): T | undefined {\n  if (obj === undefined) return undefined;\n  const { metadata, filter, setMetadata, ...rest } = obj;\n  return {\n    filter: removeNullValuesFromObject(filter),\n    metadata: removeNullValuesFromObject(metadata),\n    setMetadata: removeNullValuesFromObject(setMetadata),\n    ...rest,\n  } as T;\n}\n", "import { createApiInstance } from './fetch-api';\nimport { removeNullValues } from './utils';\nimport type {\n  RootMetadata,\n  QueryParams,\n  Filter,\n  Vector,\n  QueryResults,\n} from './types';\nimport type { SetRequired } from 'type-fest';\n\ntype ConfigOpts = {\n  /**\n   * The API key used to authenticate with the Pinecone API.\n   * Get yours from the Pinecone console: https://app.pinecone.io/\n   */\n  apiKey?: string;\n  /**\n   * The HTTP endpoint for the Pinecone index.\n   * @see https://www.pinecone.io/docs/manage-data/#specify-an-index-endpoint\n   */\n  baseUrl?: string;\n  /**\n   * The index namespace to use for all requests. This can't be changed after\n   * the client is created to ensure metadata type safety.\n   * @see https://www.pinecone.io/docs/namespaces/\n   */\n  namespace?: string;\n};\n\n/**\n * PineconeClient class used to interact with a Pinecone index.\n */\nexport class PineconeClient<Metadata extends RootMetadata> {\n  api: ReturnType<typeof createApiInstance>;\n  apiKey: string;\n  baseUrl: string;\n  namespace?: string;\n\n  constructor(config: ConfigOpts) {\n    const apiKey = config.apiKey || process.env.PINECONE_API_KEY;\n    const baseUrl = config.baseUrl || process.env.PINECONE_BASE_URL;\n    if (!apiKey) {\n      throw new Error(\n        'Missing Pinecone API key. Please provide one in the config or set the PINECONE_API_KEY environment variable.'\n      );\n    }\n    if (!baseUrl) {\n      throw new Error(\n        'Missing Pinecone base URL. Please provide one in the config or set the PINECONE_BASE_URL environment variable.'\n      );\n    }\n    this.apiKey = apiKey;\n    this.baseUrl = baseUrl;\n    this.namespace = config.namespace;\n    this.api = createApiInstance({\n      apiKey: this.apiKey,\n      baseUrl: this.baseUrl,\n    });\n  }\n\n  /**\n   * The Delete operation deletes vectors, by id, from a single namespace. You\n   * can delete items by their id, from a single namespace.\n   * @param params.ids The ids of the vectors to delete.\n   * @param params.deleteAll Deletes all vectors in the index if true.\n   * @param params.filter Metadata filter to apply to the delete.\n   * @see https://www.pinecone.io/docs/api/operation/delete/\n   */\n  async delete(params: {\n    ids?: string[];\n    deleteAll?: boolean;\n    filter?: Filter<Metadata>;\n  }): Promise<void> {\n    return this.api\n      .post('vectors/delete', {\n        json: {\n          namespace: this.namespace,\n          ...removeNullValues(params),\n        },\n      })\n      .json();\n  }\n\n  /**\n   * The DescribeIndexStats operation returns statistics about the index's\n   * contents, including the vector count per namespace, the number of\n   * dimensions, and the index fullness.\n   * @params params.filter Metadata filter to apply to the describe.\n   * @see https://www.pinecone.io/docs/api/operation/describe_index_stats/\n   */\n  async describeIndexStats(params?: { filter?: Filter<Metadata> }): Promise<{\n    namespaces: { [namespace: string]: { vectorCount: number } };\n    dimension: number;\n    indexFullness: number;\n    totalVectorCount: number;\n  }> {\n    return this.api\n      .post('describe_index_stats', {\n        json: removeNullValues(params),\n      })\n      .json();\n  }\n\n  /**\n   * The Fetch operation looks up and returns vectors, by ID, from a single\n   * namespace. The returned vectors include the vector data and/or metadata.\n   * @param params.ids The ids of the vectors to fetch.\n   * @see https://www.pinecone.io/docs/api/operation/fetch/\n   */\n  async fetch(params: { ids: string[] }): Promise<{\n    namespace: string;\n    vectors: { [vectorId: string]: Vector<Metadata> };\n  }> {\n    const searchParams: string[][] = [];\n    if (this.namespace) searchParams.push(['namespace', this.namespace]);\n    params.ids.forEach((id) => searchParams.push(['ids', id]));\n    return this.api.get('vectors/fetch', { searchParams }).json();\n  }\n\n  /**\n   * The Query operation searches a namespace, using a query vector. It\n   * retrieves the ids of the most similar items in a namespace, along with\n   * their similarity scores.\n   * @param params.topK The number of results to return.\n   * @param params.filter Metadata filter to apply to the query.\n   * @param params.id The id of the vector in the index to be used as the query vector.\n   * @param params.vector A vector to be used as the query vector.\n   * @param params.includeMetadata Whether to include metadata in the results.\n   * @param params.includeValues Whether to include vector values in the results.\n   * @note One of `vector` or `id` is required.\n   * @see https://www.pinecone.io/docs/api/operation/query/\n   */\n  async query<Params extends QueryParams<Metadata>>(\n    params: Params\n  ): Promise<QueryResults<Metadata, Params>> {\n    return this.api\n      .post('query', {\n        json: {\n          namespace: this.namespace,\n          ...removeNullValues(params),\n        },\n      })\n      .json();\n  }\n\n  /**\n   * The Update operation updates vector in a namespace. If a value is\n   * included, it will overwrite the previous value. If a set_metadata\n   * is included, the values of the fields specified in it will be added\n   * or overwrite the previous value.\n   * @param params.id The id of the vector to update.\n   * @param params.values The new vector values.\n   * @param params.setMetadata Metadata to set for the vector.\n   * @see https://www.pinecone.io/docs/api/operation/update/\n   */\n  async update(params: {\n    id: string;\n    values?: number[];\n    setMetadata?: Metadata;\n  }): Promise<void> {\n    return this.api\n      .post('vectors/update', {\n        json: {\n          namespace: this.namespace,\n          ...removeNullValues(params),\n        },\n      })\n      .json();\n  }\n\n  /**\n   * The Upsert operation writes vectors into a namespace. If a new value is\n   * upserted for an existing vector id, it will overwrite the previous value.\n   * @param params.vectors The vectors to upsert.\n   * @note This will automatically chunk the requests into batches of 1000 vectors.\n   * @see https://www.pinecone.io/docs/api/operation/upsert/\n   */\n  async upsert(params: {\n    vectors: SetRequired<Vector<Metadata>, 'metadata'>[];\n  }): Promise<void> {\n    // Don't upsert more than 1,000 vectors in a single request\n    const chunkSize = 1000;\n    for (let i = 0; i < params.vectors.length; i += chunkSize) {\n      const vectors = params.vectors.slice(i, i + chunkSize);\n      const vectorsWithoutMetadataNulls = vectors.map(removeNullValues);\n      await this.api\n        .post('vectors/upsert', {\n          json: {\n            namespace: this.namespace,\n            vectors: vectorsWithoutMetadataNulls,\n          },\n        })\n        .json();\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
