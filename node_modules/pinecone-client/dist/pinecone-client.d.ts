import { createApiInstance } from './fetch-api';
import type { RootMetadata, QueryParams, Filter, Vector, QueryResults } from './types';
import type { SetRequired } from 'type-fest';
declare type ConfigOpts = {
    /**
     * The API key used to authenticate with the Pinecone API.
     * Get yours from the Pinecone console: https://app.pinecone.io/
     */
    apiKey?: string;
    /**
     * The HTTP endpoint for the Pinecone index.
     * @see https://www.pinecone.io/docs/manage-data/#specify-an-index-endpoint
     */
    baseUrl?: string;
    /**
     * The index namespace to use for all requests. This can't be changed after
     * the client is created to ensure metadata type safety.
     * @see https://www.pinecone.io/docs/namespaces/
     */
    namespace?: string;
};
/**
 * PineconeClient class used to interact with a Pinecone index.
 */
export declare class PineconeClient<Metadata extends RootMetadata> {
    api: ReturnType<typeof createApiInstance>;
    apiKey: string;
    baseUrl: string;
    namespace?: string;
    constructor(config: ConfigOpts);
    /**
     * The Delete operation deletes vectors, by id, from a single namespace. You
     * can delete items by their id, from a single namespace.
     * @param params.ids The ids of the vectors to delete.
     * @param params.deleteAll Deletes all vectors in the index if true.
     * @param params.filter Metadata filter to apply to the delete.
     * @see https://www.pinecone.io/docs/api/operation/delete/
     */
    delete(params: {
        ids?: string[];
        deleteAll?: boolean;
        filter?: Filter<Metadata>;
    }): Promise<void>;
    /**
     * The DescribeIndexStats operation returns statistics about the index's
     * contents, including the vector count per namespace, the number of
     * dimensions, and the index fullness.
     * @params params.filter Metadata filter to apply to the describe.
     * @see https://www.pinecone.io/docs/api/operation/describe_index_stats/
     */
    describeIndexStats(params?: {
        filter?: Filter<Metadata>;
    }): Promise<{
        namespaces: {
            [namespace: string]: {
                vectorCount: number;
            };
        };
        dimension: number;
        indexFullness: number;
        totalVectorCount: number;
    }>;
    /**
     * The Fetch operation looks up and returns vectors, by ID, from a single
     * namespace. The returned vectors include the vector data and/or metadata.
     * @param params.ids The ids of the vectors to fetch.
     * @see https://www.pinecone.io/docs/api/operation/fetch/
     */
    fetch(params: {
        ids: string[];
    }): Promise<{
        namespace: string;
        vectors: {
            [vectorId: string]: Vector<Metadata>;
        };
    }>;
    /**
     * The Query operation searches a namespace, using a query vector. It
     * retrieves the ids of the most similar items in a namespace, along with
     * their similarity scores.
     * @param params.topK The number of results to return.
     * @param params.filter Metadata filter to apply to the query.
     * @param params.id The id of the vector in the index to be used as the query vector.
     * @param params.vector A vector to be used as the query vector.
     * @param params.includeMetadata Whether to include metadata in the results.
     * @param params.includeValues Whether to include vector values in the results.
     * @note One of `vector` or `id` is required.
     * @see https://www.pinecone.io/docs/api/operation/query/
     */
    query<Params extends QueryParams<Metadata>>(params: Params): Promise<QueryResults<Metadata, Params>>;
    /**
     * The Update operation updates vector in a namespace. If a value is
     * included, it will overwrite the previous value. If a set_metadata
     * is included, the values of the fields specified in it will be added
     * or overwrite the previous value.
     * @param params.id The id of the vector to update.
     * @param params.values The new vector values.
     * @param params.setMetadata Metadata to set for the vector.
     * @see https://www.pinecone.io/docs/api/operation/update/
     */
    update(params: {
        id: string;
        values?: number[];
        setMetadata?: Metadata;
    }): Promise<void>;
    /**
     * The Upsert operation writes vectors into a namespace. If a new value is
     * upserted for an existing vector id, it will overwrite the previous value.
     * @param params.vectors The vectors to upsert.
     * @note This will automatically chunk the requests into batches of 1000 vectors.
     * @see https://www.pinecone.io/docs/api/operation/upsert/
     */
    upsert(params: {
        vectors: SetRequired<Vector<Metadata>, 'metadata'>[];
    }): Promise<void>;
}
export {};
//# sourceMappingURL=pinecone-client.d.ts.map